name: Build & Publish to Release

on:
  push:
    paths:
      - "global/version.go"
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.20"
      - run: go version && go env

      - run: mkdir -p .env && echo "$SENTRY_DSN" >> .env/sentryDSN
        env:
          SENTRY_DSN: ${{secrets.SENTRY_DSN}}

      - name: Install Dependency
        run: go get

      - name: Create Build Directory
        run: mkdir build

      - name: Build for Darwin amd64
        run: CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -a -o build/launcher_darwin_amd64

      - name: Build for Darwin arm64
        run: CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -a -o build/launcher_darwin_arm64

      - name: Build for Linux 386
        run: CGO_ENABLED=0 GOOS=linux GOARCH=386 go build -a -o build/launcher_linux_386

      - name: Build for Linux amd64
        run: CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -o build/launcher_linux_amd64

      - name: Build for Linux arm
        run: CGO_ENABLED=0 GOOS=linux GOARCH=arm go build -a -o build/launcher_linux_arm

      - name: Build for Linux arm64
        run: CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -a -o build/launcher_linux_arm64

      - name: Build for Windows amd64
        run: CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -a -o build/launcher_windows_amd64.exe

      - name: Build for Windows 386
        run: CGO_ENABLED=0 GOOS=windows GOARCH=386 go build -a -o build/launcher_windows_386.exe

      - name: Build for Windows arm64
        run: CGO_ENABLED=0 GOOS=windows GOARCH=arm64 go build -a -o build/launcher_windows_arm64.exe

      - name: Check Files
        run: ls -al . && ls -al build/

      - name: Zip Build file for Darwin amd64
        run: mv build/launcher_darwin_amd64 ./launcher && zip launcher_darwin_amd64.zip launcher && rm -rf launcher

      - name: Zip Build file for Darwin arm64
        run: mv build/launcher_darwin_arm64 ./launcher && zip launcher_darwin_arm64.zip launcher && rm -rf launcher

      - name: Zip Build file for Linux 386
        run: mv build/launcher_linux_386 ./launcher && zip launcher_linux_386.zip launcher && rm -rf launcher

      - name: Zip Build file for Linux amd64
        run: mv build/launcher_linux_amd64 ./launcher && zip launcher_linux_amd64.zip launcher && rm -rf launcher

      - name: Zip Build file for Linux arm
        run: mv build/launcher_linux_arm ./launcher && zip launcher_linux_arm.zip launcher && rm -rf launcher

      - name: Zip Build file for Linux arm64
        run: mv build/launcher_linux_arm64 ./launcher && zip launcher_linux_arm64.zip launcher && rm -rf launcher

      - name: Zip Build file for Windows amd64
        run: mv build/launcher_windows_amd64.exe ./launcher.exe && zip launcher_windows_amd64.exe.zip launcher.exe && rm -rf launcher.exe

      - name: Zip Build file for Windows 386
        run: mv build/launcher_windows_386.exe ./launcher.exe && zip launcher_windows_386.exe.zip launcher.exe && rm -rf launcher.exe

      - name: Zip Build file for Windows arm64
        run: mv build/launcher_windows_arm64.exe ./launcher.exe && zip launcher_windows_arm64.exe.zip launcher.exe && rm -rf launcher.exe

      - name: Set Version
        run: echo "::set-output name=version::v$(cat global/VERSION)"
        id: version

      - name: Set Release Name
        run: echo "::set-output name=release_name::v$(cat global/VERSION)"
        id: release_name

      - uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: ${{ steps.version.outputs.release_name }}
          tag_name: ${{ steps.version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Darwin amd64 Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: launcher_darwin_amd64.zip
          asset_name: launcher_darwin_amd64.zip
          asset_content_type: application/zip

      - name: Upload Darwin arm64 Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: launcher_darwin_arm64.zip
          asset_name: launcher_darwin_arm64.zip
          asset_content_type: application/zip

      - name: Upload Linux 386 Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: launcher_linux_386.zip
          asset_name: launcher_linux_386.zip
          asset_content_type: application/zip

      - name: Upload Linux amd64 Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: launcher_linux_amd64.zip
          asset_name: launcher_linux_amd64.zip
          asset_content_type: application/zip

      - name: Upload Linux arm Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: launcher_linux_arm.zip
          asset_name: launcher_linux_arm.zip
          asset_content_type: application/zip

      - name: Upload Linux arm64 Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: launcher_linux_arm64.zip
          asset_name: launcher_linux_arm64.zip
          asset_content_type: application/zip

      - name: Upload Windows amd64 Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: launcher_windows_amd64.exe.zip
          asset_name: launcher_windows_amd64.exe.zip
          asset_content_type: application/zip

      - name: Upload Windows 386 Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: launcher_windows_386.exe.zip
          asset_name: launcher_windows_386.exe.zip
          asset_content_type: application/zip

      - name: Upload Windows arm64 Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: launcher_windows_arm64.exe.zip
          asset_name: launcher_windows_arm64.exe.zip
          asset_content_type: application/zip
